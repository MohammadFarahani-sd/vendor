stages:
  - build
  - analysis
  - unittest
  - integrationtest
  - security
  - deploy

Build:
  stage: build
  image: docker:20.10
  services:
    - name: docker:dind
    
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""


  before_script:
    #- echo -n $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    #- docker pull $CI_REGISTRY_IMAGE:latest
    #- docker logout
    - echo -n $DOCKER_HUB_PASS | docker login -u $DOCKER_HUB_USER --password-stdin $CI_REGISTRY
  script:
    - VERSION=$(cat .version)
    - >
      docker build
      --pull
      --cache-from $CI_REGISTRY_IMAGE:latest
      --label "org.opencontainers.image.title=$CI_PROJECT_TITLE"
      --label "org.opencontainers.image.url=$CI_PROJECT_URL"
      --label "org.opencontainers.image.created=$CI_JOB_STARTED_AT"
      --label "org.opencontainers.image.revision=$CI_COMMIT_SHORT_SHA"
      --label "org.opencontainers.image.version=$VERSION.$CI_COMMIT_REF_NAME"
      --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA-$CI_PIPELINE_ID
      --tag $CI_REGISTRY_IMAGE:latest
      -f ./src/Service/SuperDelivery.Paging.Api/Dockerfile .
    - docker logout
    - echo -n $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - echo $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA-$CI_PIPELINE_ID
    - echo $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA-$CI_PIPELINE_ID
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - main
    - /^hotfix-.+$/i

Sonarqube:
  stage: analysis
  image: mcr.microsoft.com/dotnet/sdk:7.0
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
      - "apt-get update"
      - "apt-get install --yes openjdk-11-jre"
      - "dotnet tool install --global dotnet-sonarscanner"
      - "export PATH=\"$PATH:$HOME/.dotnet/tools\""
      - "dotnet sonarscanner begin /k:\"paging\" /d:sonar.login=\"$SONAR_TOKEN\" /d:\"sonar.host.url=$SONAR_HOST_URL\" "
      - "dotnet build"
      - "dotnet sonarscanner end /d:sonar.login=\"$SONAR_TOKEN\""
  allow_failure: true
  only:
    - main
    - /^hotfix-.+$/i

RunningUnitTests:
  image: mcr.microsoft.com/dotnet/sdk:7.0
  stage: unittest
  script: 
    - 'dotnet test test/SuperDelivery.Paging.Domain.Test/SuperDelivery.Paging.Domain.Test.csproj -e=Test -l=console;verbosity=detailed'
  allow_failure: false
  only:
    - main
    - develop

RunningIntegrationTests:
  image: mcr.microsoft.com/dotnet/sdk:7.0
  stage: integrationtest
  script: 
    - 'dotnet test test/SuperDelivery.Paging.Integration.Test/SuperDelivery.Paging.Integration.Test.csproj -e=Test -l=console;verbosity=detailed'
  allow_failure: true
  only:
    - main
    - develop

Image:
  stage: security
  image:
    name: docker.io/aquasec/trivy:latest
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
    TRIVY_USERNAME: "$CI_REGISTRY_USER"
    TRIVY_PASSWORD: "$CI_REGISTRY_PASSWORD"
    TRIVY_AUTH_URL: "$CI_REGISTRY"
    TRIVY_NO_PROGRESS: "true"
    TRIVY_CACHE_DIR: ".trivycache/"
    FULL_IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA-$CI_PIPELINE_ID
  script:
    - trivy --version
    - time trivy image --clear-cache
    - time trivy image --download-db-only
    - time trivy image --exit-code 0 --format template --template "@/contrib/gitlab.tpl" --output "$CI_PROJECT_DIR/gl-container-scanning-report.json" "$FULL_IMAGE_NAME"
    - time trivy image --exit-code 0 "$FULL_IMAGE_NAME"
    - time trivy image --exit-code 1 --severity CRITICAL "$FULL_IMAGE_NAME"
  allow_failure: true
  cache:
    paths:
      - .trivycache/
  artifacts:
    paths:
      - gl-container-scanning-report.json
    reports:
      container_scanning: gl-container-scanning-report.json
  only:
    - main
    - /^hotfix-.+$/i

Dev:
  image: bitnami/git
  stage: deploy
  before_script:
    - VERSION=$(cat .version)
    - git clone https://${CI_USERNAME}:${CI_PUSH_TOKEN}@git.nizek.com/superdelivery/paging.git app
    - git config --global user.email "ci@git.nizek.com"
    - git config --global user.name "Gitlab CI/CD"
  script:
    - cd app
    - git checkout gitops
    - cd helm
    - 'sed -i "s%    version:.*%    version: ${VERSION}.${CI_PIPELINE_ID}%g" dev-values.yaml'
    - 'sed -i "s%    tag:.*%    tag: !!str ${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}%g" dev-values.yaml'
    - git commit -am "[CI] Update Image version to ($CI_COMMIT_SHORT_SHA-$CI_PIPELINE_ID) for ($CI_PROJECT_NAME:$CI_JOB_STAGE)"
    - git push
  only:
    - main
    - develop

Test:
  image: bitnami/git
  stage: deploy
  before_script:
    - VERSION=$(cat .version)
    - git clone https://${CI_USERNAME}:${CI_PUSH_TOKEN}@git.nizek.com/superdelivery/paging.git app
    - git config --global user.email "ci@git.nizek.com"
    - git config --global user.name "Gitlab CI/CD"
  script:
    - cd app
    - git checkout gitops
    - cd helm
    - 'sed -i "s%    version:.*%    version: ${VERSION}.${CI_PIPELINE_ID}%g" test-values.yaml'
    - 'sed -i "s%    tag:.*%    tag: !!str ${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}%g" test-values.yaml'
    - git commit -am "[CI] Update Image version to ($CI_COMMIT_SHORT_SHA-$CI_PIPELINE_ID) for ($CI_PROJECT_NAME:$CI_JOB_STAGE)"
    - git push
  needs:
    - Dev
  only:
    - main

Stage:
  image: bitnami/git
  stage: deploy
  before_script:
    - VERSION=$(cat .version)
    - git clone https://${CI_USERNAME}:${CI_PUSH_TOKEN}@git.nizek.com/superdelivery/paging.git app
    - git config --global user.email "ci@git.nizek.com"
    - git config --global user.name "Gitlab CI/CD"
  script:
    - cd app
    - git checkout gitops
    - cd helm
    - 'sed -i "s%    version:.*%    version: ${VERSION}.${CI_PIPELINE_ID}%g" stage-values.yaml'
    - 'sed -i "s%    tag:.*%    tag: !!str ${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}%g" stage-values.yaml'
    - git commit -am "[CI] Update Image version to ($CI_COMMIT_SHORT_SHA-$CI_PIPELINE_ID) for ($CI_PROJECT_NAME:$CI_JOB_STAGE)"
    - git push
  only:
    - main
  when: manual

Prod:
  image: bitnami/git
  stage: deploy
  before_script:
    - VERSION=$(cat .version)
    - git clone https://${CI_USERNAME}:${CI_PUSH_TOKEN}@git.nizek.com/superdelivery/paging.git app
    - git config --global user.email "ci@git.nizek.com"
    - git config --global user.name "Gitlab CI/CD"
  script:
    - cd app
    - git checkout gitops
    - cd helm
    - 'sed -i "s%    version:.*%    version: ${VERSION}.${CI_PIPELINE_ID}%g" prod-values.yaml'
    - 'sed -i "s%    tag:.*%    tag: !!str ${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}%g" prod-values.yaml'
    - git commit -am "[CI] Update Image version to ($CI_COMMIT_SHORT_SHA-$CI_PIPELINE_ID) for ($CI_PROJECT_NAME:$CI_JOB_STAGE)"
    - git push
  only:
    - main
  when: manual

